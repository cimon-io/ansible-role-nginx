---
- name: "ensure that nginx root directory exists"
  file:
    path: "{{ item.value.root }}"
    state: directory
  when: item.value.root is defined
  with_dict: "{{ nginx_sites }}"

- name: "realscheme definition"
  template:
    src: "etc/nginx/conf.d/realscheme.conf.j2"
    dest: "/etc/nginx/conf.d/realscheme.conf"

- name: "nginx server params file"
  template:
    src: "etc/nginx/server_params.j2"
    dest: "/etc/nginx/server_params"

- name: "site configuration"
  template:
    src: "etc/nginx/sites-available/site.conf.j2"
    dest: "/etc/nginx/sites-available/{{ item.key }}.conf"
  notify:
    - reload nginx
  with_dict: "{{ nginx_sites }}"

- name: "generate auth file"
  template:
    src: "etc/nginx/htpasswd.j2"
    dest: "/etc/nginx/{{ item.name }}.htpasswd"
  with_items: "{{ nginx_auth_basic }}"

- name: "link the config"
  file:
    src: "/etc/nginx/sites-available/{{ item.key }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.key }}.conf"
    state: link
  notify:
    - reload nginx
  with_dict: "{{ nginx_sites }}"

- name: "get current config links"
  find:
    paths: "/etc/nginx/sites-enabled/"
    patterns: '*.conf'
    file_type: "link"
  register: _config_links

- name: "create list with disabled configs, pt.1"
  set_fact:
    _config_paths: "{{ _config_links.files | map(attribute='path') | list }}"

- name: "create list with disabled configs, pt.2"
  set_fact:
    _unmanaged_configs: "{{ _config_paths | difference(nginx_sites.keys() | map('regex_replace', '^(.*)$', '/etc/nginx/sites-enabled/\\1.conf') | list ) }}"

- name: "remove old config links"
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ _unmanaged_configs }}"
